/* DO NOT EDIT THIS FILE - it is machine generated */

#include <jni.h>
#include <string.h>
#include <stdio.h>
#include <android/log.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/ioctl.h>

#include "NativePoker.h"
#include "my_space.h"
#include "my_jiance_barcode0307.h"
#define  LOG_TAG    "NativePoker"
#define  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)
#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)

#define	 PKG_CLASSNAME		"de/kp/rtspcamera/poker/PokerController"


//////////////////////////////////////////////
int P_jiance=0;//
int Num_jiance=0;
int change=1;
char* mytempout1 = NULL;
short tmpbufx[1920*1080];
int testPokers[] = {0,0,0,1,2,3,20,30,40,31,32,33,4,17,5,13,39,36,4,5,6,7,8};
///////////////////////////////////////////

my_space *Consequence=new my_space;

#ifdef __cplusplus
extern "C" {
#endif

void init(){
	LOGD("Init");

	char buf[100];
	memset(buf,0,sizeof(buf));

	Consequence->card_p_old=new int[55];
	Consequence->card_p=new int[55];
	for(int i=0;i<55;i++)
	    Consequence->card_p[i]=0;

	Consequence->card_pro_pot=new double[55][4][6];
	Consequence->card_pro_line=new double[55][4][2];
	Consequence->card_pro_center=new double[55][2];

	Consequence->para_num=0;
	Consequence->card_para_num=new int[55];
	for(int i=0;i<55;i++)
	    Consequence->card_para_num[i]=0;

	 Consequence->card_para=new int[55][55];
	 Consequence->card_para_center=new double[55][2];

	 Consequence->new_card_num=0;
	 Consequence->new_card=new int[55];

	 Consequence->mult_x=2;
	 Consequence->mult_y=2;

	 LOGD("Init %d\n",Consequence->mult_x);
}

void testData(my_space* result){
	LOGD("testData \n");
	result->para_num = 6;
	LOGD("testData %d\n",result->para_num);
	int index = 0;
	for (int i = 0; i< result->para_num; i++){
		result->card_para_num[i] = 3;
		for (int j = 0; j < result->card_para_num[i]; j++){
			result->card_para[i][j] = testPokers[index];
			index++;
		}
	}
}

/*
 * Class:     de_kp_rtspcamera_poker_NativePoker
 * Method:    DecodePicture
 * Signature: ([BII)V
 */
JNIEXPORT void JNICALL Java_de_kp_rtspcamera_poker_NativePoker_DecodePicture
  (JNIEnv *env, jclass obj, jbyteArray indata, jint img_w, jint img_h){
    if(change == 1)
    {
        init();
        change = 0;
    }

        char* pin = (char *)env->GetByteArrayElements(indata,0);

        int newestCard;
        int numOfPeople;
        jintArray pokerNumOfPeoples;
        jobjectArray pokerResults;
        ///////////////////////////////////////////////////////////////////////////////////
        mytempout1 = pin;
        for(int i=0;i<1920*1080;i++)
        {
            tmpbufx[i] = * mytempout1++;
        }
        LOGD("algo start img_w = %d, img_h = %d\n",img_w , img_h);
        P_jiance=my_jiance_barcode0307(tmpbufx,img_h,img_w,Consequence);
        LOGD("algo end img_w = %d, img_h = %d\n",img_w , img_h);
        newestCard = Consequence->newst_card;
//        testData(Consequence);
        if(P_jiance==1)
            Num_jiance=0;
        else
            Num_jiance++;

        if(Num_jiance>2)
        {
            Num_jiance=0;

            Consequence->para_num=0;
            for(int i=0;i<55;i++)
            {
                Consequence->card_para_num[i]=0;
                Consequence->card_p[i]=0;
            }
        }

        if (Consequence->para_num>0)
        {
            LOGD("There is  %d  heap card !!!\n",Consequence->para_num);
            numOfPeople = Consequence->para_num;
            pokerNumOfPeoples = (env)->NewIntArray(numOfPeople);
            (env)->SetIntArrayRegion(pokerNumOfPeoples, 0, numOfPeople, Consequence->card_para_num);

            jclass intClass = env->FindClass("[I");
            pokerResults = (env)->NewObjectArray(numOfPeople,intClass,NULL);

            for(int i=0;i<numOfPeople;i++){
           	  LOGD("The %d  heap center is (%d,%d) ,have %d cards is :",i,(int)Consequence->card_para_center[i][0],(int)Consequence->card_para_center[i][1],Consequence->card_para_num[i]);
              jintArray intdata = env->NewIntArray(Consequence->card_para_num[i]);
              env->SetIntArrayRegion(intdata,0,Consequence->card_para_num[i],(jint*)& Consequence->card_para[i]);
              env->SetObjectArrayElement(pokerResults,i,intdata);
              env->DeleteLocalRef(intdata);
//              	  for(int j = 0; j < Consequence->card_para_num[i]; j++) {
//                      Itoa3(Consequence->card_para[i][j]);
//                  }
            }



        }
        else
        {
            LOGD("Consequence->para_num = 0 !");
            numOfPeople = 0 ;
            pokerNumOfPeoples = (env)->NewIntArray(1);

			//闂佸吋鍎抽崲鑼躲亹閸ヮ剙鏋侀柟娈垮枤閻鏌ｉ妸銉ョ伄lass
			jclass intClass = env->FindClass("[I");
			//闂佸搫鍊瑰妯肩磽閹煎ゲject闂佽桨鐒︽竟鍡欏垝瀹ュ鏅�锟藉濞咃繝姊婚崼娑樼仾婵¤尙鐝╪t[]
			pokerResults = (env)->NewObjectArray(1,intClass,NULL);
        }

        do{
		   LOGD("do CallBack %d", numOfPeople);
		   jclass cls = (env)->FindClass(PKG_CLASSNAME);
		   jmethodID callback = (env)->GetStaticMethodID(cls, "onCallbackProcess",  "(II[I[[I)V");
		   (env)->CallStaticVoidMethod(cls, callback,newestCard, numOfPeople, pokerNumOfPeoples, pokerResults);

	   }while (0);
	   (env)->DeleteLocalRef(pokerNumOfPeoples);
	   (env)->DeleteLocalRef(pokerResults);
	   (env)->ReleaseByteArrayElements(indata,(jbyte *)pin,0);
}

void Itoa3(int n)
{


    switch(n)
    {
        case 0:
        {
            LOGD("FP 1");
            break;
        }
        case 1:
        {
            LOGD("FP 2");
            break;
        }
        case 2:
        {
            LOGD("FP 3");
            break;
        }
        case 3:
        {
            LOGD("FP 4");
            break;
        }
        case 4:
        {
            LOGD("FP 5");
            break;
        }
        case 5:
        {
            LOGD("FP 6");
            break;
        }
        case 6:
        {
            LOGD("FP 7");
            break;
        }
        case 7:
        {
            LOGD("FP 8");
            break;
        }
        case 8:
        {
            LOGD("FP 9");
            break;
        }
        case 9:
        {
            LOGD("FP 10");
            break;
        }
        case 10:
        {
            LOGD("FP J");
            break;
        }
        case 11:
        {
            LOGD("FP Q");
            break;
        }
        case 12:
        {
            LOGD("FP K");
            break;
        }
        case 13:
        {
            LOGD("MH 1");
            break;
        }
        case 14:
        {
            LOGD("MH 2");
            break;
        }
        case 15:
        {
            LOGD("MH 3");
            break;
        }
        case 16:
        {
            LOGD("MH 4");
            break;
        }
        case 17:
        {
            LOGD("MH 5");
            break;
        }
        case 18:
        {
            LOGD("MH 6");
            break;
        }
        case 19:
        {
            LOGD("MH 7");
            break;
        }
        case 20:
        {
            LOGD("MH 8");
            break;
        }
        case 21:
        {
            LOGD("MH 9");
            break;
        }
        case 22:
        {
            LOGD("MH 10");
            break;
        }
        case 23:
        {
            LOGD("MH J");
            break;
        }
        case 24:
        {
            LOGD("MH Q");
            break;
        }
        case 25:
        {
            LOGD("MH K");
            break;
        }
        case 26:
        {
            LOGD("HOT 1");
            break;
        }
        case 27:
        {
            LOGD("HOT 2");
            break;
        }
        case 28:
        {
            LOGD("HOT 3");
            break;
        }
        case 29:
        {
            LOGD("HOT 4");
            break;
        }
        case 30:
        {
            LOGD("HOT 5");
            break;
        }
        case 31:
        {
            LOGD("HOT 6");
            break;
        }
        case 32:
        {
            LOGD("HOT 7");
            break;
        }
        case 33:
        {
            LOGD("HOT 8");
            break;
        }
        case 34:
        {
            LOGD("HOT 9");
            break;
        }
        case 35:
        {
            LOGD("HOT 10");
            break;
        }
        case 36:
        {
            LOGD("HOT J");
            break;
        }
        case 37:
        {
            LOGD("HOT Q");
            break;
        }
        case 38:
        {
            LOGD("HOT K");
            break;
        }
        case 39:
        {
            LOGD("HET 1");
            break;
        }
        case 40:
        {
            LOGD("HET 2");
            break;
        }
        case 41:
        {
            LOGD("HET 3");
            break;
        }
        case 42:
        {
            LOGD("HET 4");
            break;
        }
        case 43:
        {
            LOGD("HET 5");
            break;
        }
        case 44:
        {
            LOGD("HET 6");
            break;
        }
        case 45:
        {
            LOGD("HET 7");
            break;
        }
        case 46:
        {
            LOGD("HET 8");
            break;
        }
        case 47:
        {
            LOGD("HET 9");
            break;
        }
        case 48:
        {
            LOGD("HET 10");
            break;
        }
        case 49:
        {
            LOGD("HET J");
            break;
        }
        case 50:
        {
            LOGD("HET Q");
            break;
        }
        case 51:
        {
            LOGD("HET K");
            break;
        }
        case 52:
        {
            LOGD("XIAO gui");
            break;
        }
        case 53:
        {
            LOGD("DA gui");
            break;
        }
        case 54:
        {
            LOGD("GUANG GAO PAI");
            break;
        }
    }

}

#ifdef __cplusplus
}
#endif
